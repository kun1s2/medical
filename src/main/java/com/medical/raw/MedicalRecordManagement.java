//package com.medical.raw;
//
//import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
//import org.fisco.bcos.sdk.abi.TypeReference;
//import org.fisco.bcos.sdk.abi.datatypes.*;
//import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
//import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.*;
//import org.fisco.bcos.sdk.client.Client;
//import org.fisco.bcos.sdk.contract.Contract;
//import org.fisco.bcos.sdk.crypto.CryptoSuite;
//import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
//import org.fisco.bcos.sdk.model.CryptoType;
//import org.fisco.bcos.sdk.model.TransactionReceipt;
//import org.fisco.bcos.sdk.model.callback.TransactionCallback;
//import org.fisco.bcos.sdk.transaction.model.exception.ContractException;
//
//import java.math.BigInteger;
//import java.util.Arrays;
//import java.util.Collections;
//import java.util.List;
//
//@SuppressWarnings("unchecked")
//public class MedicalRecordManagement extends Contract {
//    public static final String[] BINARY_ARRAY = {"","","","","","610100860182614aac565b508091505092915050565b600060c08301600083015184820360008601526150078282614abb565b915050602083015184820360208601526150218282614abb565b91505060408301516150366040860182615146565b506060830151848203606086015261504e8282614a51565b91505060808301516150636080860182614aac565b5060a083015161507660a0860182614aac565b508091505092915050565b60006101008301600083015161509a6000860182615146565b5060208301516150ad6020860182614966565b50604083015184820360408601526150c58282614abb565b915050606083015184820360608601526150df8282614abb565b915050608083015184820360808601526150f98282614abb565b91505060a083015184820360a08601526151138282614abb565b91505060c083015161512860c0860182615146565b5060e083015161513b60e0860182615146565b508091505092915050565b61514f8161552a565b82525050565b6000602082019050818103600083015261516f8184614975565b905092915050565b6000602082019050818103600083015261519181846149e3565b905092915050565b600060208201905081810360008301526151b281614af1565b9050919050565b600060208201905081810360008301526151d281614b28565b9050919050565b600060208201905081810360008301526151f281614b5f565b9050919050565b6000602082019050818103600083015261521281614b96565b9050919050565b6000602082019050818103600083015261523281614bcd565b9050919050565b6000602082019050818103600083015261525281614c04565b9050919050565b6000602082019050818103600083015261527281614c61565b9050919050565b6000602082019050818103600083015261529281614c98565b9050919050565b600060208201905081810360008301526152b281614ccf565b9050919050565b600060208201905081810360008301526152d281614d06565b9050919050565b600060208201905081810360008301526152f281614d3d565b9050919050565b6000602082019050818103600083015261531281614d74565b9050919050565b600060208201905081810360008301526153338184614dd1565b905092915050565b600060208201905081810360008301526153558184614e28565b905092915050565b600060208201905081810360008301526153778184614fea565b905092915050565b600061010082019050615395600083018b615146565b6153a2602083018a614966565b81810360408301526153b48189614abb565b905081810360608301526153c88188614abb565b905081810360808301526153dc8187614abb565b905081810360a08301526153f08186614abb565b90506153ff60c0830185615146565b61540c60e0830184615146565b9998505050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561543c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561545d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b60006154f78261550a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061553f8261550a565b9050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561557d578082015181840152602081019050615562565b8381111561558c576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058205779a310de1bd98a7dcfaa806c5a65cd939c80ed909de796a390f4d171616fbb6c6578706572696d656e74616cf50037"};
//
//    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);
//
//    public static final String[] SM_BINARY_ARRAY = {};
//
//    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);
//
//    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getReservationAllInfo\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"reservationList\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patientID\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"startSeekMedical\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"patientReservation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPatientAllMedical\",\"outputs\":[{\"components\":[{\"name\":\"patientId\",\"type\":\"address\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\"},{\"name\":\"doctorAddress\",\"type\":\"address\"},{\"name\":\"filledTime\",\"type\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"medicalId\",\"type\":\"uint256\"}],\"name\":\"queryedicalRecord\",\"outputs\":[{\"components\":[{\"name\":\"patientId\",\"type\":\"address\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\"},{\"name\":\"doctorAddress\",\"type\":\"address\"},{\"name\":\"filledTime\",\"type\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPatientReservationInfo\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"reservation\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patientID\",\"type\":\"address\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\"}],\"name\":\"newMedicalRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getPatientInfo\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"name\":\"medicalRecordsIdList\",\"type\":\"uint256[]\"},{\"name\":\"isReservation\",\"type\":\"bool\"},{\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"patient\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"}],\"name\":\"registerDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDoctorAllReservation\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getDoctorInfo\",\"outputs\":[{\"components\":[{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"doctor\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"endVistis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patientID\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"closeSeekMedical\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"}],\"name\":\"newReservationInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"deptName\",\"type\":\"string\"}],\"name\":\"getReservationByName\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"reservationList\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resAll\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"};
//
//    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);
//
//    public static final String FUNC_GETRESERVATIONALLINFO = "getReservationAllInfo";
//
//    public static final String FUNC_STARTSEEKMEDICAL = "startSeekMedical";
//
//    public static final String FUNC_PATIENTRESERVATION = "patientReservation";
//
//    public static final String FUNC_GETPATIENTALLMEDICAL = "getPatientAllMedical";
//
//    public static final String FUNC_QUERYEDICALRECORD = "queryedicalRecord";
//
//    public static final String FUNC_GETPATIENTRESERVATIONINFO = "getPatientReservationInfo";
//
//    public static final String FUNC_NEWMEDICALRECORD = "newMedicalRecord";
//
//    public static final String FUNC_GETPATIENTINFO = "getPatientInfo";
//
//    public static final String FUNC_REGISTERDOCTOR = "registerDoctor";
//
//    public static final String FUNC_GETDOCTORALLRESERVATION = "getDoctorAllReservation";
//
//    public static final String FUNC_GETDOCTORINFO = "getDoctorInfo";
//
//    public static final String FUNC_REGISTER = "register";
//
//    public static final String FUNC_ENDVISTIS = "endVistis";
//
//    public static final String FUNC_CLOSESEEKMEDICAL = "closeSeekMedical";
//
//    public static final String FUNC_NEWRESERVATIONINFO = "newReservationInfo";
//
//    public static final String FUNC_GETRESERVATIONBYNAME = "getReservationByName";
//
//    public static final String FUNC_RESALL = "resAll";
//
//    protected MedicalRecordManagement(String contractAddress, Client client, CryptoKeyPair credential) {
//        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
//    }
//
//    public static String getBinary(CryptoSuite cryptoSuite) {
//        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
//    }
//
//    public DynamicArray<Struct0> getReservationAllInfo() throws ContractException {
//        final Function function = new Function(FUNC_GETRESERVATIONALLINFO,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
//        return executeCallWithSingleValueReturn(function, DynamicArray.class);
//    }
//
//    public TransactionReceipt startSeekMedical(String patientID, BigInteger id) {
//        final Function function = new Function(
//                FUNC_STARTSEEKMEDICAL,
//                Arrays.<Type>asList(new Address(patientID),
//                new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] startSeekMedical(String patientID, BigInteger id, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_STARTSEEKMEDICAL,
//                Arrays.<Type>asList(new Address(patientID),
//                new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForStartSeekMedical(String patientID, BigInteger id) {
//        final Function function = new Function(
//                FUNC_STARTSEEKMEDICAL,
//                Arrays.<Type>asList(new Address(patientID),
//                new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple2<String, BigInteger> getStartSeekMedicalInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_STARTSEEKMEDICAL,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple2<String, BigInteger>(
//
//                (String) results.get(0).getValue(),
//                (BigInteger) results.get(1).getValue()
//                );
//    }
//
//    public TransactionReceipt patientReservation(BigInteger id) {
//        final Function function = new Function(
//                FUNC_PATIENTRESERVATION,
//                Arrays.<Type>asList(new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] patientReservation(BigInteger id, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_PATIENTRESERVATION,
//                Arrays.<Type>asList(new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForPatientReservation(BigInteger id) {
//        final Function function = new Function(
//                FUNC_PATIENTRESERVATION,
//                Arrays.<Type>asList(new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple1<BigInteger> getPatientReservationInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_PATIENTRESERVATION,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple1<BigInteger>(
//
//                (BigInteger) results.get(0).getValue()
//                );
//    }
//
//    public DynamicArray<Struct1> getPatientAllMedical() throws ContractException {
//        final Function function = new Function(FUNC_GETPATIENTALLMEDICAL,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct1>>() {}));
//        return executeCallWithSingleValueReturn(function, DynamicArray.class);
//    }
//
//    public TransactionReceipt queryedicalRecord(BigInteger medicalId) {
//        final Function function = new Function(
//                FUNC_QUERYEDICALRECORD,
//                Arrays.<Type>asList(new Uint256(medicalId)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] queryedicalRecord(BigInteger medicalId, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_QUERYEDICALRECORD,
//                Arrays.<Type>asList(new Uint256(medicalId)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForQueryedicalRecord(BigInteger medicalId) {
//        final Function function = new Function(
//                FUNC_QUERYEDICALRECORD,
//                Arrays.<Type>asList(new Uint256(medicalId)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple1<BigInteger> getQueryedicalRecordInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_QUERYEDICALRECORD,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple1<BigInteger>(
//
//                (BigInteger) results.get(0).getValue()
//                );
//    }
//
//    public Tuple1<Struct1> getQueryedicalRecordOutput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getOutput();
//        final Function function = new Function(FUNC_QUERYEDICALRECORD,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple1<Struct1>(
//
//                (Struct1) results.get(0)
//                );
//    }
//
//    public DynamicArray<Struct0> getPatientReservationInfo() throws ContractException {
//        final Function function = new Function(FUNC_GETPATIENTRESERVATIONINFO,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
//        return executeCallWithSingleValueReturn(function, DynamicArray.class);
//    }
//
//    public TransactionReceipt newMedicalRecord(String patientID, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory) {
//        final Function function = new Function(
//                FUNC_NEWMEDICALRECORD,
//                Arrays.<Type>asList(new Address(patientID),
//                new Utf8String(department),
//                new Utf8String(doctorName),
//                new Utf8String(registrationInfo),
//                new Utf8String(pastMedicalHistory),
//                new Utf8String(currentMedicalHistory)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] newMedicalRecord(String patientID, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_NEWMEDICALRECORD,
//                Arrays.<Type>asList(new Address(patientID),
//                new Utf8String(department),
//                new Utf8String(doctorName),
//                new Utf8String(registrationInfo),
//                new Utf8String(pastMedicalHistory),
//                new Utf8String(currentMedicalHistory)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForNewMedicalRecord(String patientID, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory) {
//        final Function function = new Function(
//                FUNC_NEWMEDICALRECORD,
//                Arrays.<Type>asList(new Address(patientID),
//                new Utf8String(department),
//                new Utf8String(doctorName),
//                new Utf8String(registrationInfo),
//                new Utf8String(pastMedicalHistory),
//                new Utf8String(currentMedicalHistory)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple6<String, String, String, String, String, String> getNewMedicalRecordInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_NEWMEDICALRECORD,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple6<String, String, String, String, String, String>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (String) results.get(2).getValue(),
//                (String) results.get(3).getValue(),
//                (String) results.get(4).getValue(),
//                (String) results.get(5).getValue()
//                );
//    }
//
//    public Struct2 getPatientInfo(String _id) throws ContractException {
//        final Function function = new Function(FUNC_GETPATIENTINFO,
//                Arrays.<Type>asList(new Address(_id)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Struct2>() {}));
//        return executeCallWithSingleValueReturn(function, Struct2.class);
//    }
//
//    public TransactionReceipt registerDoctor(String account, String doctorName, String deptName) {
//        final Function function = new Function(
//                FUNC_REGISTERDOCTOR,
//                Arrays.<Type>asList(new Address(account),
//                new Utf8String(doctorName),
//                new Utf8String(deptName)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] registerDoctor(String account, String doctorName, String deptName, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_REGISTERDOCTOR,
//                Arrays.<Type>asList(new Address(account),
//                new Utf8String(doctorName),
//                new Utf8String(deptName)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForRegisterDoctor(String account, String doctorName, String deptName) {
//        final Function function = new Function(
//                FUNC_REGISTERDOCTOR,
//                Arrays.<Type>asList(new Address(account),
//                new Utf8String(doctorName),
//                new Utf8String(deptName)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple3<String, String, String> getRegisterDoctorInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_REGISTERDOCTOR,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple3<String, String, String>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (String) results.get(2).getValue()
//                );
//    }
//
//    public DynamicArray<Struct0> getDoctorAllReservation() throws ContractException {
//        final Function function = new Function(FUNC_GETDOCTORALLRESERVATION,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
//        return executeCallWithSingleValueReturn(function, DynamicArray.class);
//    }
//
//    public Struct3 getDoctorInfo(String _id) throws ContractException {
//        final Function function = new Function(FUNC_GETDOCTORINFO,
//                Arrays.<Type>asList(new Address(_id)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Struct3>() {}));
//        return executeCallWithSingleValueReturn(function, Struct3.class);
//    }
//
//    public TransactionReceipt register(String account, String name, String gender, BigInteger age) {
//        final Function function = new Function(
//                FUNC_REGISTER,
//                Arrays.<Type>asList(new Address(account),
//                new Utf8String(name),
//                new Utf8String(gender),
//                new Uint256(age)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] register(String account, String name, String gender, BigInteger age, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_REGISTER,
//                Arrays.<Type>asList(new Address(account),
//                new Utf8String(name),
//                new Utf8String(gender),
//                new Uint256(age)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForRegister(String account, String name, String gender, BigInteger age) {
//        final Function function = new Function(
//                FUNC_REGISTER,
//                Arrays.<Type>asList(new Address(account),
//                new Utf8String(name),
//                new Utf8String(gender),
//                new Uint256(age)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple4<String, String, String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_REGISTER,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple4<String, String, String, BigInteger>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (String) results.get(2).getValue(),
//                (BigInteger) results.get(3).getValue()
//                );
//    }
//
//    public TransactionReceipt endVistis(BigInteger id) {
//        final Function function = new Function(
//                FUNC_ENDVISTIS,
//                Arrays.<Type>asList(new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] endVistis(BigInteger id, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_ENDVISTIS,
//                Arrays.<Type>asList(new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForEndVistis(BigInteger id) {
//        final Function function = new Function(
//                FUNC_ENDVISTIS,
//                Arrays.<Type>asList(new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple1<BigInteger> getEndVistisInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_ENDVISTIS,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple1<BigInteger>(
//
//                (BigInteger) results.get(0).getValue()
//                );
//    }
//
//    public TransactionReceipt closeSeekMedical(String patientID, BigInteger id) {
//        final Function function = new Function(
//                FUNC_CLOSESEEKMEDICAL,
//                Arrays.<Type>asList(new Address(patientID),
//                new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] closeSeekMedical(String patientID, BigInteger id, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_CLOSESEEKMEDICAL,
//                Arrays.<Type>asList(new Address(patientID),
//                new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForCloseSeekMedical(String patientID, BigInteger id) {
//        final Function function = new Function(
//                FUNC_CLOSESEEKMEDICAL,
//                Arrays.<Type>asList(new Address(patientID),
//                new Uint256(id)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple2<String, BigInteger> getCloseSeekMedicalInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_CLOSESEEKMEDICAL,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple2<String, BigInteger>(
//
//                (String) results.get(0).getValue(),
//                (BigInteger) results.get(1).getValue()
//                );
//    }
//
//    public TransactionReceipt newReservationInfo(String time, String pm, BigInteger reservationTime) {
//        final Function function = new Function(
//                FUNC_NEWRESERVATIONINFO,
//                Arrays.<Type>asList(new Utf8String(time),
//                new Utf8String(pm),
//                new Uint256(reservationTime)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] newReservationInfo(String time, String pm, BigInteger reservationTime, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_NEWRESERVATIONINFO,
//                Arrays.<Type>asList(new Utf8String(time),
//                new Utf8String(pm),
//                new Uint256(reservationTime)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForNewReservationInfo(String time, String pm, BigInteger reservationTime) {
//        final Function function = new Function(
//                FUNC_NEWRESERVATIONINFO,
//                Arrays.<Type>asList(new Utf8String(time),
//                new Utf8String(pm),
//                new Uint256(reservationTime)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple3<String, String, BigInteger> getNewReservationInfoInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_NEWRESERVATIONINFO,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple3<String, String, BigInteger>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (BigInteger) results.get(2).getValue()
//                );
//    }
//
//    public DynamicArray<Struct0> getReservationByName(String deptName) throws ContractException {
//        final Function function = new Function(FUNC_GETRESERVATIONBYNAME,
//                Arrays.<Type>asList(new Utf8String(deptName)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
//        return executeCallWithSingleValueReturn(function, DynamicArray.class);
//    }
//
//    public Tuple8<BigInteger, String, String, String, String, String, BigInteger, BigInteger> resAll(BigInteger param0) throws ContractException {
//        final Function function = new Function(FUNC_RESALL,
//                Arrays.<Type>asList(new Uint256(param0)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = executeCallWithMultipleValueReturn(function);
//        return new Tuple8<BigInteger, String, String, String, String, String, BigInteger, BigInteger>(
//                (BigInteger) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (String) results.get(2).getValue(),
//                (String) results.get(3).getValue(),
//                (String) results.get(4).getValue(),
//                (String) results.get(5).getValue(),
//                (BigInteger) results.get(6).getValue(),
//                (BigInteger) results.get(7).getValue());
//    }
//
//    public static MedicalRecordManagement load(String contractAddress, Client client, CryptoKeyPair credential) {
//        return new MedicalRecordManagement(contractAddress, client, credential);
//    }
//
//    public static MedicalRecordManagement deploy(Client client, CryptoKeyPair credential) throws ContractException {
//        return deploy(MedicalRecordManagement.class, client, credential, getBinary(client.getCryptoSuite()), "");
//    }
//
//    public static class Struct0 extends DynamicStruct {
//        public BigInteger id;
//
//        public String doctorId;
//
//        public String doctorName;
//
//        public String deptName;
//
//        public String time;
//
//        public String pm;
//
//        public BigInteger reservationTime;
//
//        public BigInteger isVisit;
//
//        public Struct0(Uint256 id, Address doctorId, Utf8String doctorName, Utf8String deptName, Utf8String time, Utf8String pm, Uint256 reservationTime, Uint256 isVisit) {
//            super(id,doctorId,doctorName,deptName,time,pm,reservationTime,isVisit);
//            this.id = id.getValue();
//            this.doctorId = doctorId.getValue();
//            this.doctorName = doctorName.getValue();
//            this.deptName = deptName.getValue();
//            this.time = time.getValue();
//            this.pm = pm.getValue();
//            this.reservationTime = reservationTime.getValue();
//            this.isVisit = isVisit.getValue();
//        }
//
//        public Struct0(BigInteger id, String doctorId, String doctorName, String deptName, String time, String pm, BigInteger reservationTime, BigInteger isVisit) {
//            super(new Uint256(id),new Address(doctorId),new Utf8String(doctorName),new Utf8String(deptName),new Utf8String(time),new Utf8String(pm),new Uint256(reservationTime),new Uint256(isVisit));
//            this.id = id;
//            this.doctorId = doctorId;
//            this.doctorName = doctorName;
//            this.deptName = deptName;
//            this.time = time;
//            this.pm = pm;
//            this.reservationTime = reservationTime;
//            this.isVisit = isVisit;
//        }
//    }
//
//    public static class Struct1 extends DynamicStruct {
//        public String patientId;
//
//        public String department;
//
//        public String doctorName;
//
//        public String registrationInfo;
//
//        public String pastMedicalHistory;
//
//        public String currentMedicalHistory;
//
//        public String doctorAddress;
//
//        public BigInteger filledTime;
//
//        public Boolean isFilled;
//
//        public Struct1(Address patientId, Utf8String department, Utf8String doctorName, Utf8String registrationInfo, Utf8String pastMedicalHistory, Utf8String currentMedicalHistory, Address doctorAddress, Uint256 filledTime, Bool isFilled) {
//            super(patientId,department,doctorName,registrationInfo,pastMedicalHistory,currentMedicalHistory,doctorAddress,filledTime,isFilled);
//            this.patientId = patientId.getValue();
//            this.department = department.getValue();
//            this.doctorName = doctorName.getValue();
//            this.registrationInfo = registrationInfo.getValue();
//            this.pastMedicalHistory = pastMedicalHistory.getValue();
//            this.currentMedicalHistory = currentMedicalHistory.getValue();
//            this.doctorAddress = doctorAddress.getValue();
//            this.filledTime = filledTime.getValue();
//            this.isFilled = isFilled.getValue();
//        }
//
//        public Struct1(String patientId, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, String doctorAddress, BigInteger filledTime, Boolean isFilled) {
//            super(new Address(patientId),new Utf8String(department),new Utf8String(doctorName),new Utf8String(registrationInfo),new Utf8String(pastMedicalHistory),new Utf8String(currentMedicalHistory),new Address(doctorAddress),new Uint256(filledTime),new Bool(isFilled));
//            this.patientId = patientId;
//            this.department = department;
//            this.doctorName = doctorName;
//            this.registrationInfo = registrationInfo;
//            this.pastMedicalHistory = pastMedicalHistory;
//            this.currentMedicalHistory = currentMedicalHistory;
//            this.doctorAddress = doctorAddress;
//            this.filledTime = filledTime;
//            this.isFilled = isFilled;
//        }
//    }
//
//    public static class Struct2 extends DynamicStruct {
//        public String name;
//
//        public String gender;
//
//        public BigInteger age;
//
//        public List<BigInteger> medicalRecordsIdList;
//
//        public Boolean isReservation;
//
//        public Boolean isValid;
//
//        public Struct2(Utf8String name, Utf8String gender, Uint256 age, DynamicArray<Uint256> medicalRecordsIdList, Bool isReservation, Bool isValid) {
//            super(name,gender,age,medicalRecordsIdList,isReservation,isValid);
//            this.name = name.getValue();
//            this.gender = gender.getValue();
//            this.age = age.getValue();
//            this.medicalRecordsIdList = medicalRecordsIdList.getNativeValue();
//            this.isReservation = isReservation.getValue();
//            this.isValid = isValid.getValue();
//        }
//
//        public Struct2(String name, String gender, BigInteger age, List<BigInteger> medicalRecordsIdList, Boolean isReservation, Boolean isValid) {
//            super(new Utf8String(name),new Utf8String(gender),new Uint256(age),new DynamicArray<Uint256>(medicalRecordsIdList.stream().map(obj -> new Uint256(obj)).collect(java.util.stream.Collectors.toList())),new Bool(isReservation),new Bool(isValid));
//            this.name = name;
//            this.gender = gender;
//            this.age = age;
//            this.medicalRecordsIdList = medicalRecordsIdList;
//            this.isReservation = isReservation;
//            this.isValid = isValid;
//        }
//    }
//
//    public static class Struct3 extends DynamicStruct {
//        public String doctorName;
//
//        public String deptName;
//
//        public Boolean isValid;
//
//        public Struct3(Utf8String doctorName, Utf8String deptName, Bool isValid) {
//            super(doctorName,deptName,isValid);
//            this.doctorName = doctorName.getValue();
//            this.deptName = deptName.getValue();
//            this.isValid = isValid.getValue();
//        }
//
//        public Struct3(String doctorName, String deptName, Boolean isValid) {
//            super(new Utf8String(doctorName),new Utf8String(deptName),new Bool(isValid));
//            this.doctorName = doctorName;
//            this.deptName = deptName;
//            this.isValid = isValid;
//        }
//    }
//}
