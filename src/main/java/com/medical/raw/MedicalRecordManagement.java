package com.medical.raw;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.*;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class MedicalRecordManagement extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","610100808354040283529160200191614013565b820191906000526020600020905b815481529060010190602001808311613ff657829003601f168201915b505050505081526020016006820154815260200160078201548152505081526020019060010190613d0f565b505050509050919050565b60078181548110151561405957fe5b90600052602060002090600802016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141315780601f1061410657610100808354040283529160200191614131565b820191906000526020600020905b81548152906001019060200180831161411457829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141cf5780601f106141a4576101008083540402835291602001916141cf565b820191906000526020600020905b8154815290600101906020018083116141b257829003601f168201915b505050505090806004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561426d5780601f106142425761010080835404028352916020019161426d565b820191906000526020600020905b81548152906001019060200180831161425057829003601f168201915b505050505090806005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561430b5780601f106142e05761010080835404028352916020019161430b565b820191906000526020600020905b8154815290600101906020018083116142ee57829003601f168201915b5050505050908060060154908060070154905088565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161515156143b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143a9906159e7565b60405180910390fd5b60a060405190810160405280858152602001828152602001848152602001838152602001600115158152506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190614437929190614837565b506020820151816001019080519060200190614454929190614837565b506040820151816002019080519060200190614471929190614837565b506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050505050505050565b60008060009050600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015614582578273ffffffffffffffffffffffffffffffffffffffff16600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561455a57fe5b906000526020600020906008020160010160009054906101000a905050506001915050614588565b50600090505b92915050565b600080600090505b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561465c5782600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561462d57fe5b906000526020600020906008020160000154141561464f576001915050614662565b8080600101915050614596565b50600090505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106146a057805485556146dd565b828001600101855582156146dd57600052602060002091601f016020900482015b828111156146dc5782548255916001019190600101906146c1565b5b5090506146ea9190614a23565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061472f57805160ff191683800117855561475d565b8280016001018555821561475d579182015b8281111561475c578251825591602001919060010190614741565b5b50905061476a9190614a23565b5090565b60c060405190810160405280606081526020016060815260200160008152602001606081526020016000151581526020016000151581525090565b6101006040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b60a060405190810160405280606081526020016060815260200160608152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061487857805160ff19168380011785556148a6565b828001600101855582156148a6579182015b828111156148a557825182559160200191906001019061488a565b5b5090506148b39190614a23565b5090565b8280548282559060005260206000209081019282156148f3579160200282015b828111156148f25782518255916020019190600101906148d7565b5b5090506149009190614a23565b5090565b50805460018160011615610100020316600290046000825580601f1061492a5750614949565b601f0160209004906000526020600020908101906149489190614a23565b5b50565b6101006040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b61012060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b614a4591905b80821115614a41576000816000905550600101614a29565b5090565b90565b6000614a548235615caf565b905092915050565b600082601f8301121515614a6f57600080fd5b8135614a82614a7d82615b74565b615b47565b91508181835260208401935060208101905083856020840282011115614aa757600080fd5b60005b83811015614ad75781614abd8882614a48565b845260208401935060208301925050600181019050614aaa565b5050505092915050565b600082601f8301121515614af457600080fd5b8135614b07614b0282615b9c565b615b47565b91508082526020830160208301858383011115614b2357600080fd5b614b2e838284615ccb565b50505092915050565b6000614b438235615cc1565b905092915050565b600060208284031215614b5d57600080fd5b6000614b6b84828501614a48565b91505092915050565b60008060008060008060c08789031215614b8d57600080fd5b6000614b9b89828a01614a48565b965050602087013567ffffffffffffffff811115614bb857600080fd5b614bc489828a01614ae1565b955050604087013567ffffffffffffffff811115614be157600080fd5b614bed89828a01614ae1565b945050606087013567ffffffffffffffff811115614c0a57600080fd5b614c1689828a01614ae1565b935050608087013567ffffffffffffffff811115614c3357600080fd5b614c3f89828a01614ae1565b92505060a087013567ffffffffffffffff811115614c5c57600080fd5b614c6889828a01614ae1565b9150509295509295509295565b60008060008060808587031215614c8b57600080fd5b6000614c9987828801614a48565b945050602085013567ffffffffffffffff811115614cb657600080fd5b614cc287828801614ae1565b935050604085013567ffffffffffffffff811115614cdf57600080fd5b614ceb87828801614ae1565b9250506060614cfc87828801614b37565b91505092959194509250565b600080600080600060a08688031215614d2057600080fd5b6000614d2e88828901614a48565b955050602086013567ffffffffffffffff811115614d4b57600080fd5b614d5788828901614ae1565b945050604086013567ffffffffffffffff811115614d7457600080fd5b614d8088828901614ae1565b9350506060614d9188828901614b37565b925050608086013567ffffffffffffffff811115614dae57600080fd5b614dba88828901614ae1565b9150509295509295909350565b60008060408385031215614dda57600080fd5b6000614de885828601614a48565b9250506020614df985828601614b37565b9150509250929050565b60008060408385031215614e1657600080fd5b600083013567ffffffffffffffff811115614e3057600080fd5b614e3c85828601614a5c565b9250506020614e4d85828601614a48565b9150509250929050565b600060208284031215614e6957600080fd5b600082013567ffffffffffffffff811115614e8357600080fd5b614e8f84828501614ae1565b91505092915050565b600080600060608486031215614ead57600080fd5b600084013567ffffffffffffffff811115614ec757600080fd5b614ed386828701614ae1565b935050602084013567ffffffffffffffff811115614ef057600080fd5b614efc86828701614ae1565b9250506040614f0d86828701614b37565b9150509250925092565b600060208284031215614f2957600080fd5b6000614f3784828501614b37565b91505092915050565b614f4981615c67565b82525050565b6000614f5a82615bfc565b80845260208401935083602082028501614f7385615bc8565b60005b84811015614fac578383038852614f8e83835161557e565b9250614f9982615c33565b9150602088019750600181019050614f76565b508196508694505050505092915050565b6000614fc882615c07565b808452602084019350836020","82028501614fe185615bd5565b60005b8481101561501a578383038852614ffc8383516156f6565b925061500782615c40565b9150602088019750600181019050614fe4565b508196508694505050505092915050565b600061503682615c12565b8084526020840193508360208202850161504f85615be2565b60005b8481101561508857838303885261506a83835161578d565b925061507582615c4d565b9150602088019750600181019050615052565b508196508694505050505092915050565b60006150a482615c1d565b8084526020840193506150b683615bef565b60005b828110156150e8576150cc868351615852565b6150d582615c5a565b91506020860195506001810190506150b9565b50849250505092915050565b6150fd81615c79565b82525050565b600061510e82615c28565b808452615122816020860160208601615cda565b61512b81615d0d565b602085010191505092915050565b6000601e82527fe794a8e688b7e5a484e4ba8ee5b0b1e8af8ae4b8ade79a84e78ab6e6808100006020830152604082019050919050565b6000600f82527fe794a8e688b7e4b88de5ad98e59ca800000000000000000000000000000000006020830152604082019050919050565b6000601282527fe4bda0e5b7b2e9a284e7baa6e8afa5e58fb700000000000000000000000000006020830152604082019050919050565b6000601282527fe4bda0e69caae9a284e7baa6e8afa5e58fb700000000000000000000000000006020830152604082019050919050565b6000601582527fe8afa5e794a8e688b7e69caae59ca8e5b0b1e8af8a00000000000000000000006020830152604082019050919050565b6000602182527fe794a8e688b7e69caae5a484e4ba8ee5b0b1e8af8ae4b8ade79a84e78ab6e68060208301527f81000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601282527fe8afa5e58cbbe7949fe4b88de5ad98e59ca800000000000000000000000000006020830152604082019050919050565b6000600c82527fe6b2a1e69c89e69d83e9999000000000000000000000000000000000000000006020830152604082019050919050565b6000601582527fe794a8e688b7e4b88de5ad98e59ca8e5ad98e59ca800000000000000000000006020830152604082019050919050565b6000600f82527fe794a8e688b7e5b7b2e5ad98e59ca800000000000000000000000000000000006020830152604082019050919050565b6000601682527fe8afa5e58fb7e5b7b2e8a2abe9a284e7baa6e5ae8c21000000000000000000006020830152604082019050919050565b6000602882527fe794a8e688b7e5b7b2e9a284e7baa6e69caae5b0b1e8af8aefbc8ce5b0b1e58560208301527f88e5b0b1e8af8a210000000000000000000000000000000000000000000000006040830152606082019050919050565b600060a08301600083015184820360008601526154368282615103565b915050602083015184820360208601526154508282615103565b9150506040830151848203604086015261546a8282615103565b915050606083015161547f6060860182615852565b50608083015161549260808601826150f4565b508091505092915050565b6000610120830160008301516154b66000860182614f40565b50602083015184820360208601526154ce8282615103565b915050604083015184820360408601526154e88282615103565b915050606083015184820360608601526155028282615103565b9150506080830151848203608086015261551c8282615103565b91505060a083015184820360a08601526155368282615103565b91505060c083015161554b60c0860182614f40565b5060e083015161555e60e0860182615852565b506101008301516155736101008601826150f4565b508091505092915050565b6000610120830160008301516155976000860182614f40565b50602083015184820360208601526155af8282615103565b915050604083015184820360408601526155c98282615103565b915050606083015184820360608601526155e38282615103565b915050608083015184820360808601526155fd8282615103565b91505060a083015184820360a08601526156178282615103565b91505060c083015161562c60c0860182614f40565b5060e083015161563f60e0860182615852565b506101008301516156546101008601826150f4565b508091505092915050565b600060c083016000830151848203600086015261567c8282615103565b915050602083015184820360208601526156968282615103565b91505060408301516156ab6040860182615852565b50606083015184820360608601526156c38282615099565b91505060808301516156d860808601826150f4565b5060a08301516156eb60a08601826150f4565b508091505092915050565b600060c08301600083015184820360008601526157138282615103565b9150506020830151848203602086015261572d8282615103565b91505060408301516157426040860182615852565b506060830151848203606086015261575a8282615099565b915050608083015161576f60808601826150f4565b5060a083015161578260a08601826150f4565b508091505092915050565b6000610100830160008301516157a66000860182615852565b5060208301516157b96020860182614f40565b50604083015184820360408601526157d18282615103565b915050606083015184820360608601526157eb8282615103565b915050608083015184820360808601526158058282615103565b91505060a083015184820360a086015261581f8282615103565b91505060c083015161583460c0860182615852565b5060e083015161584760e0860182615852565b508091505092915050565b61585b81615ca5565b82525050565b6000602082019050818103600083015261587b8184614f4f565b905092915050565b6000602082019050818103600083015261589d8184614fbd565b905092915050565b600060208201905081810360008301526158bf818461502b565b905092915050565b600060208201905081810360008301526158e081615139565b9050919050565b6000602082019050818103600083015261590081615170565b9050919050565b60006020820190508181036000830152615920816151a7565b9050919050565b60006020820190508181036000830152615940816151de565b9050919050565b6000602082019050818103600083015261596081615215565b9050919050565b600060208201905081810360008301526159808161524c565b9050919050565b600060208201905081810360008301526159a0816152a9565b9050919050565b600060208201905081810360008301526159c0816152e0565b9050919050565b600060208201905081810360008301526159e081615317565b9050919050565b60006020820190508181036000830152615a008161534e565b9050919050565b60006020820190508181036000830152615a2081615385565b9050919050565b60006020820190508181036000830152615a40816153bc565b9050919050565b60006020820190508181036000830152615a618184615419565b905092915050565b60006020820190508181036000830152615a83818461549d565b905092915050565b60006020820190508181036000830152615aa5818461565f565b905092915050565b600061010082019050615ac3600083018b615852565b615ad0602083018a614f40565b8181036040830152615ae28189615103565b90508181036060830152615af68188615103565b90508181036080830152615b0a8187615103565b905081810360a0830152615b1e8186615103565b9050615b2d60c0830185615852565b615b3a60e0830184615852565b9998505050505050505050565b6000604051905081810181811067ffffffffffffffff82111715615b6a57600080fd5b8060405250919050565b600067ffffffffffffffff821115615b8b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615bb357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000615c7282615c85565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000615cba82615c85565b9050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015615cf8578082015181840152602081019050615cdd565b83811115615d07576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058208a2a2919d33e6ad738f8c0a0b0ca607cd3c73395c22f9a8e9f775b98f41aea8b6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getReservationAllInfo\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"reservationList\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patientID\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"startSeekMedical\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"patientIds\",\"type\":\"address[]\"},{\"name\":\"doctorId\",\"type\":\"address\"}],\"name\":\"getReservationPatient\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"name\":\"medicalRecordsIdList\",\"type\":\"uint256[]\"},{\"name\":\"isReservation\",\"type\":\"bool\"},{\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"patientList\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"patientReservation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPatientAllMedical\",\"outputs\":[{\"components\":[{\"name\":\"patientId\",\"type\":\"address\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\"},{\"name\":\"doctorAddress\",\"type\":\"address\"},{\"name\":\"filledTime\",\"type\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPatientReservationInfo\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"reservation\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patientID\",\"type\":\"address\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\"}],\"name\":\"newMedicalRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getPatientInfo\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"name\":\"medicalRecordsIdList\",\"type\":\"uint256[]\"},{\"name\":\"isReservation\",\"type\":\"bool\"},{\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"patient\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDoctorAllReservation\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"}],\"name\":\"getDoctorInfo\",\"outputs\":[{\"components\":[{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"doctor\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"endVistis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"patientID\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"closeSeekMedical\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"}],\"name\":\"newReservationInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"medicalId\",\"type\":\"uint256\"}],\"name\":\"queryMedicalRecord\",\"outputs\":[{\"components\":[{\"name\":\"patientId\",\"type\":\"address\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"registrationInfo\",\"type\":\"string\"},{\"name\":\"pastMedicalHistory\",\"type\":\"string\"},{\"name\":\"currentMedicalHistory\",\"type\":\"string\"},{\"name\":\"doctorAddress\",\"type\":\"address\"},{\"name\":\"filledTime\",\"type\":\"uint256\"},{\"name\":\"isFilled\",\"type\":\"bool\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"deptName\",\"type\":\"string\"}],\"name\":\"getReservationByName\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"name\":\"reservationList\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resAll\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"doctorId\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"deptName\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"pm\",\"type\":\"string\"},{\"name\":\"reservationTime\",\"type\":\"uint256\"},{\"name\":\"isVisit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"doctorName\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"name\":\"deptName\",\"type\":\"string\"}],\"name\":\"registerDoctor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETRESERVATIONALLINFO = "getReservationAllInfo";

    public static final String FUNC_STARTSEEKMEDICAL = "startSeekMedical";

    public static final String FUNC_GETRESERVATIONPATIENT = "getReservationPatient";

    public static final String FUNC_PATIENTRESERVATION = "patientReservation";

    public static final String FUNC_GETPATIENTALLMEDICAL = "getPatientAllMedical";

    public static final String FUNC_GETPATIENTRESERVATIONINFO = "getPatientReservationInfo";

    public static final String FUNC_NEWMEDICALRECORD = "newMedicalRecord";

    public static final String FUNC_GETPATIENTINFO = "getPatientInfo";

    public static final String FUNC_GETDOCTORALLRESERVATION = "getDoctorAllReservation";

    public static final String FUNC_GETDOCTORINFO = "getDoctorInfo";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_ENDVISTIS = "endVistis";

    public static final String FUNC_CLOSESEEKMEDICAL = "closeSeekMedical";

    public static final String FUNC_NEWRESERVATIONINFO = "newReservationInfo";

    public static final String FUNC_QUERYMEDICALRECORD = "queryMedicalRecord";

    public static final String FUNC_GETRESERVATIONBYNAME = "getReservationByName";

    public static final String FUNC_RESALL = "resAll";

    public static final String FUNC_REGISTERDOCTOR = "registerDoctor";

    protected MedicalRecordManagement(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public DynamicArray<Struct0> getReservationAllInfo() throws ContractException {
        final Function function = new Function(FUNC_GETRESERVATIONALLINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt startSeekMedical(String patientID, BigInteger id) {
        final Function function = new Function(
                FUNC_STARTSEEKMEDICAL,
                Arrays.<Type>asList(new Address(patientID),
                new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] startSeekMedical(String patientID, BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STARTSEEKMEDICAL,
                Arrays.<Type>asList(new Address(patientID),
                new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStartSeekMedical(String patientID, BigInteger id) {
        final Function function = new Function(
                FUNC_STARTSEEKMEDICAL,
                Arrays.<Type>asList(new Address(patientID),
                new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getStartSeekMedicalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STARTSEEKMEDICAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public DynamicArray<Struct1> getReservationPatient(List<String> patientIds, String doctorId) throws ContractException {
        final Function function = new Function(FUNC_GETRESERVATIONPATIENT,
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(patientIds, Address.class)),
                new Address(doctorId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct1>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt patientReservation(BigInteger id) {
        final Function function = new Function(
                FUNC_PATIENTRESERVATION,
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] patientReservation(BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PATIENTRESERVATION,
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPatientReservation(BigInteger id) {
        final Function function = new Function(
                FUNC_PATIENTRESERVATION,
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getPatientReservationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PATIENTRESERVATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public DynamicArray<Struct2> getPatientAllMedical() throws ContractException {
        final Function function = new Function(FUNC_GETPATIENTALLMEDICAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct2>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public DynamicArray<Struct0> getPatientReservationInfo() throws ContractException {
        final Function function = new Function(FUNC_GETPATIENTRESERVATIONINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public TransactionReceipt newMedicalRecord(String patientID, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory) {
        final Function function = new Function(
                FUNC_NEWMEDICALRECORD,
                Arrays.<Type>asList(new Address(patientID),
                new Utf8String(department),
                new Utf8String(doctorName),
                new Utf8String(registrationInfo),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newMedicalRecord(String patientID, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWMEDICALRECORD,
                Arrays.<Type>asList(new Address(patientID),
                new Utf8String(department),
                new Utf8String(doctorName),
                new Utf8String(registrationInfo),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewMedicalRecord(String patientID, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory) {
        final Function function = new Function(
                FUNC_NEWMEDICALRECORD,
                Arrays.<Type>asList(new Address(patientID),
                new Utf8String(department),
                new Utf8String(doctorName),
                new Utf8String(registrationInfo),
                new Utf8String(pastMedicalHistory),
                new Utf8String(currentMedicalHistory)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<String, String, String, String, String, String> getNewMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue()
                );
    }

    public Struct1 getPatientInfo(String _id) throws ContractException {
        final Function function = new Function(FUNC_GETPATIENTINFO,
                Arrays.<Type>asList(new Address(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct1>() {}));
        return executeCallWithSingleValueReturn(function, Struct1.class);
    }

    public DynamicArray<Struct0> getDoctorAllReservation() throws ContractException {
        final Function function = new Function(FUNC_GETDOCTORALLRESERVATION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Struct3 getDoctorInfo(String _id) throws ContractException {
        final Function function = new Function(FUNC_GETDOCTORINFO,
                Arrays.<Type>asList(new Address(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct3>() {}));
        return executeCallWithSingleValueReturn(function, Struct3.class);
    }

    public TransactionReceipt register(String account, String name, String gender, BigInteger age) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new Address(account),
                new Utf8String(name),
                new Utf8String(gender),
                new Uint256(age)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String account, String name, String gender, BigInteger age, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new Address(account),
                new Utf8String(name),
                new Utf8String(gender),
                new Uint256(age)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, String name, String gender, BigInteger age) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new Address(account),
                new Utf8String(name),
                new Utf8String(gender),
                new Uint256(age)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt endVistis(BigInteger id) {
        final Function function = new Function(
                FUNC_ENDVISTIS,
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] endVistis(BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ENDVISTIS,
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEndVistis(BigInteger id) {
        final Function function = new Function(
                FUNC_ENDVISTIS,
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getEndVistisInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENDVISTIS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt closeSeekMedical(String patientID, BigInteger id) {
        final Function function = new Function(
                FUNC_CLOSESEEKMEDICAL,
                Arrays.<Type>asList(new Address(patientID),
                new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] closeSeekMedical(String patientID, BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CLOSESEEKMEDICAL,
                Arrays.<Type>asList(new Address(patientID),
                new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCloseSeekMedical(String patientID, BigInteger id) {
        final Function function = new Function(
                FUNC_CLOSESEEKMEDICAL,
                Arrays.<Type>asList(new Address(patientID),
                new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getCloseSeekMedicalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CLOSESEEKMEDICAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt newReservationInfo(String time, String pm, BigInteger reservationTime) {
        final Function function = new Function(
                FUNC_NEWRESERVATIONINFO,
                Arrays.<Type>asList(new Utf8String(time),
                new Utf8String(pm),
                new Uint256(reservationTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newReservationInfo(String time, String pm, BigInteger reservationTime, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWRESERVATIONINFO,
                Arrays.<Type>asList(new Utf8String(time),
                new Utf8String(pm),
                new Uint256(reservationTime)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewReservationInfo(String time, String pm, BigInteger reservationTime) {
        final Function function = new Function(
                FUNC_NEWRESERVATIONINFO,
                Arrays.<Type>asList(new Utf8String(time),
                new Utf8String(pm),
                new Uint256(reservationTime)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getNewReservationInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWRESERVATIONINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt queryMedicalRecord(BigInteger medicalId) {
        final Function function = new Function(
                FUNC_QUERYMEDICALRECORD,
                Arrays.<Type>asList(new Uint256(medicalId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] queryMedicalRecord(BigInteger medicalId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_QUERYMEDICALRECORD,
                Arrays.<Type>asList(new Uint256(medicalId)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForQueryMedicalRecord(BigInteger medicalId) {
        final Function function = new Function(
                FUNC_QUERYMEDICALRECORD,
                Arrays.<Type>asList(new Uint256(medicalId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getQueryMedicalRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_QUERYMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Struct2> getQueryMedicalRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_QUERYMEDICALRECORD,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct2>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Struct2>(

                (Struct2) results.get(0)
                );
    }

    public DynamicArray<Struct0> getReservationByName(String deptName) throws ContractException {
        final Function function = new Function(FUNC_GETRESERVATIONBYNAME,
                Arrays.<Type>asList(new Utf8String(deptName)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct0>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Tuple8<BigInteger, String, String, String, String, String, BigInteger, BigInteger> resAll(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_RESALL,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, String, String, String, String, String, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue());
    }

    public TransactionReceipt registerDoctor(String account, String doctorName, String gender, BigInteger age, String deptName) {
        final Function function = new Function(
                FUNC_REGISTERDOCTOR,
                Arrays.<Type>asList(new Address(account),
                new Utf8String(doctorName),
                new Utf8String(gender),
                new Uint256(age),
                new Utf8String(deptName)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerDoctor(String account, String doctorName, String gender, BigInteger age, String deptName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERDOCTOR,
                Arrays.<Type>asList(new Address(account),
                new Utf8String(doctorName),
                new Utf8String(gender),
                new Uint256(age),
                new Utf8String(deptName)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterDoctor(String account, String doctorName, String gender, BigInteger age, String deptName) {
        final Function function = new Function(
                FUNC_REGISTERDOCTOR,
                Arrays.<Type>asList(new Address(account),
                new Utf8String(doctorName),
                new Utf8String(gender),
                new Uint256(age),
                new Utf8String(deptName)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, BigInteger, String> getRegisterDoctorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERDOCTOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, BigInteger, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue()
                );
    }

    public static MedicalRecordManagement load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MedicalRecordManagement(contractAddress, client, credential);
    }

    public static MedicalRecordManagement deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MedicalRecordManagement.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public BigInteger id;

        public String doctorId;

        public String doctorName;

        public String deptName;

        public String time;

        public String pm;

        public BigInteger reservationTime;

        public BigInteger isVisit;

        public Struct0(Uint256 id, Address doctorId, Utf8String doctorName, Utf8String deptName, Utf8String time, Utf8String pm, Uint256 reservationTime, Uint256 isVisit) {
            super(id,doctorId,doctorName,deptName,time,pm,reservationTime,isVisit);
            this.id = id.getValue();
            this.doctorId = doctorId.getValue();
            this.doctorName = doctorName.getValue();
            this.deptName = deptName.getValue();
            this.time = time.getValue();
            this.pm = pm.getValue();
            this.reservationTime = reservationTime.getValue();
            this.isVisit = isVisit.getValue();
        }

        public Struct0(BigInteger id, String doctorId, String doctorName, String deptName, String time, String pm, BigInteger reservationTime, BigInteger isVisit) {
            super(new Uint256(id),new Address(doctorId),new Utf8String(doctorName),new Utf8String(deptName),new Utf8String(time),new Utf8String(pm),new Uint256(reservationTime),new Uint256(isVisit));
            this.id = id;
            this.doctorId = doctorId;
            this.doctorName = doctorName;
            this.deptName = deptName;
            this.time = time;
            this.pm = pm;
            this.reservationTime = reservationTime;
            this.isVisit = isVisit;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public String name;

        public String gender;

        public BigInteger age;

        public List<BigInteger> medicalRecordsIdList;

        public Boolean isReservation;

        public Boolean isValid;

//        public Struct1(Utf8String name, Utf8String gender, Uint256 age, DynamicArray<Uint256> medicalRecordsIdList, Bool isReservation, Bool isValid) {
//            super(name,gender,age,medicalRecordsIdList,isReservation,isValid);
//            this.name = name.getValue();
//            this.gender = gender.getValue();
//            this.age = age.getValue();
//            this.medicalRecordsIdList = medicalRecordsIdList.getNativeValue();
//            this.isReservation = isReservation.getValue();
//            this.isValid = isValid.getValue();
//        }

        public Struct1(String name, String gender, BigInteger age, List<BigInteger> medicalRecordsIdList, Boolean isReservation, Boolean isValid) {
            super(new Utf8String(name),new Utf8String(gender),new Uint256(age),new DynamicArray<Uint256>(medicalRecordsIdList.stream().map(obj -> new Uint256(obj)).collect(java.util.stream.Collectors.toList())),new Bool(isReservation),new Bool(isValid));
            this.name = name;
            this.gender = gender;
            this.age = age;
            this.medicalRecordsIdList = medicalRecordsIdList;
            this.isReservation = isReservation;
            this.isValid = isValid;
        }
    }

    public static class Struct2 extends DynamicStruct {
        public String patientId;

        public String department;

        public String doctorName;

        public String registrationInfo;

        public String pastMedicalHistory;

        public String currentMedicalHistory;

        public String doctorAddress;

        public BigInteger filledTime;

        public Boolean isFilled;

        public Struct2(Address patientId, Utf8String department, Utf8String doctorName, Utf8String registrationInfo, Utf8String pastMedicalHistory, Utf8String currentMedicalHistory, Address doctorAddress, Uint256 filledTime, Bool isFilled) {
            super(patientId,department,doctorName,registrationInfo,pastMedicalHistory,currentMedicalHistory,doctorAddress,filledTime,isFilled);
            this.patientId = patientId.getValue();
            this.department = department.getValue();
            this.doctorName = doctorName.getValue();
            this.registrationInfo = registrationInfo.getValue();
            this.pastMedicalHistory = pastMedicalHistory.getValue();
            this.currentMedicalHistory = currentMedicalHistory.getValue();
            this.doctorAddress = doctorAddress.getValue();
            this.filledTime = filledTime.getValue();
            this.isFilled = isFilled.getValue();
        }

        public Struct2(String patientId, String department, String doctorName, String registrationInfo, String pastMedicalHistory, String currentMedicalHistory, String doctorAddress, BigInteger filledTime, Boolean isFilled) {
            super(new Address(patientId),new Utf8String(department),new Utf8String(doctorName),new Utf8String(registrationInfo),new Utf8String(pastMedicalHistory),new Utf8String(currentMedicalHistory),new Address(doctorAddress),new Uint256(filledTime),new Bool(isFilled));
            this.patientId = patientId;
            this.department = department;
            this.doctorName = doctorName;
            this.registrationInfo = registrationInfo;
            this.pastMedicalHistory = pastMedicalHistory;
            this.currentMedicalHistory = currentMedicalHistory;
            this.doctorAddress = doctorAddress;
            this.filledTime = filledTime;
            this.isFilled = isFilled;
        }
    }

    public static class Struct3 extends DynamicStruct {
        public String doctorName;

        public String deptName;

        public String gender;

        public BigInteger age;

        public Boolean isValid;

        public Struct3(Utf8String doctorName, Utf8String deptName, Utf8String gender, Uint256 age, Bool isValid) {
            super(doctorName,deptName,gender,age,isValid);
            this.doctorName = doctorName.getValue();
            this.deptName = deptName.getValue();
            this.gender = gender.getValue();
            this.age = age.getValue();
            this.isValid = isValid.getValue();
        }

        public Struct3(String doctorName, String deptName, String gender, BigInteger age, Boolean isValid) {
            super(new Utf8String(doctorName),new Utf8String(deptName),new Utf8String(gender),new Uint256(age),new Bool(isValid));
            this.doctorName = doctorName;
            this.deptName = deptName;
            this.gender = gender;
            this.age = age;
            this.isValid = isValid;
        }
    }
}
